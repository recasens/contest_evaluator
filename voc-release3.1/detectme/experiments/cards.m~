%%%%%%
% TEST 1: Training with just one image isolated, detect over the test set 
% of 52 isolated cards

% test set
[~, test_all] = getdetector(8);
%[~, images_spades] = getdetector(32);
%[~, images_clubs] = getdetector(31);
%[~, images_hearts] = getdetector(30);
%test_all_cards = cat(2, images_diamonds, images_spades, images_clubs, images_hearts);
test_set = format_dataset(test_all, 'Bottle');

% detector
[detector1, ~] = getdetector(7);
model1 = format_detector(detector1);

% visualize detector
visualizeHOG(model1.rootfilters{1}.w);

% test detector
threshold = -1000;
[rec,prec, ap, BB, ids, score, tp] = eval_svm_parfor(test_set, model1, threshold);

% show top detections
figure;
for i=1:25
    subplot(5, 5, i);
    im = test_images_cards{ids(i)}{1};
    im = imresize(im, initial_scale);
    bbox = round(BB(:,i));
    showboxes(im, bbox')
    text(bbox(1),bbox(2)-10,strcat('\color{red}',num2str(score(i))),'FontSize',16)
end



%%%%%%
% TEST 2: Training with just one image isolated, detect over a test set
% formed by grid (3x3) of cards

% test set
% 35 : grid of images
[~, images_grid] = getdetector(35);
test_set = format_dataset(images_grid,'grid');

% detector
%34 : single isolated image 7H
%35 : single image 7H with 8H as negative
%37 : single image 7H with top scored near neighbours
%38 : 3 images 7H with top scored near neightbours in different positions
% with the objective to get rid of the position bias

[detector2, image_detector] = getdetector(38);
model2 = format_detector(detector2);
model2.class = 'grid';

% test detector
threshold = -1000;
[rec, prec, ap, BB, ids, score, tp] = eval_svm_parfor(test_set, model2, threshold);

% show top detections
figure;
for i=1:25
    subplot(5, 5, i);
    im = images_grid{ids(i)}{1};
    im = imresize(im, initial_scale);
    bbox = round(BB(:,i));
    showboxes(im, bbox')
    if tp(i)==1
        text(bbox(1),bbox(2)-10,strcat('\color{green}',num2str(score(i))),'FontSize',16)
    else
        text(bbox(1),bbox(2)-10,strcat('\color{red}',num2str(score(i))),'FontSize',16)
    end
end

% show positive detections
j=1;
for i=1:size(score,1)
    if tp(i)==1
        subplot(5, 5, j);
        j = j+1;
        im = images_grid{ids(i)}{1};
        im = imresize(im, initial_scale);
        bbox = round(BB(:,i));
        showboxes(im, bbox')
        text(bbox(1),bbox(2)-10,strcat('\color{green}',num2str(score(i))),'FontSize',16)
    end
end

% show top scores
scatter(1:size(score,1), score, [], tp, 'fill')

% execution
im = images_grid{2}{1};
im_resize = imresize(im, 0.4);
bbox = process(im, model2, 2.7); % detect objects
showboxes(im, bbox);          % display results

% figure();
% image(image_detector{1}{1})
% figure();
% image(image_detector{2}{1})
% 
% figure();
% image(images_grid{1}{1})
% figure();



% image(images_grid{2}{1})
% figure();
% image(images_grid{3}{1})
% figure();
% image(images_grid{4}{1})
% figure();
% image(images_grid{5}{1})
% figure();
% image(images_grid{6}{1})
% figure();
% image(images_grid{7}{1})




%%%%%%
% TEST 3: detector with image comparison




